# An example using multi-stage image builds to create a final image without uv.

# First, build the application in the `/app` directory.
# See `Dockerfile` for details.
#FROM ghcr.io/astral-sh/uv:python3.12-bookworm-slim AS builder
#FROM ghcr.io/astral-sh/uv:python3.12.2-bookworm-slim AS builder
#FROM ghcr.io/astral-sh/uv:0.1.9-python3.12-bookworm-slim AS builder
#FROM ghcr.io/astral-sh/uv:0.1.16-python3.12 AS builder
FROM ghcr.io/astral-sh/uv:0.5.9-python3.12-bookworm AS builder

ENV UV_COMPILE_BYTECODE=1 UV_LINK_MODE=copy
WORKDIR /app
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --frozen --no-install-project --no-dev
ADD . /app
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev


# Then, use a final image without uv
FROM python:3.12-slim-bookworm

# Instalar dependencias necesarias para compilar librdkafka
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    git \
    python3-dev \
    libsnappy-dev \
    zlib1g-dev \
    libbz2-dev \
    libgflags-dev \
    libzstd-dev \
    liblz4-dev \
    && rm -rf /var/lib/apt/lists/*

# Instalar librdkafka desde el c√≥digo fuente
RUN curl -L https://github.com/edenhill/librdkafka/archive/refs/tags/v2.4.0.tar.gz | tar xzf - \
    && cd librdkafka-2.4.0 \
    && ./configure \
    && make \
    && make install \
    && cd .. \
    && rm -rf librdkafka-2.4.0 \
    && ldconfig

# It is important to use the image that matches the builder, as the path to the
# Python executable must be the same, e.g., using `python:3.11-slim-bookworm`
# will fail.

WORKDIR /app

# Copy the application from the builder
COPY --from=builder --chown=app:app /app /app

# Place executables in the environment at the front of the path
ENV PATH="/app/.venv/bin:$PATH"

# Run the FastAPI application by default
CMD ["python", "/app/run.py"]